function measure_components(properties::Tuple{MeasurementProperties, Vararg{MeasurementProperties}}, labels::AbstractArray; N::Int = 0)
    N = N == 0 ? maximum(labels) : N
    # Set primary key as the component label.
    t = table(Base.OneTo(N); names = [:l], pkey=:l)
    # Some measurements require that we have computed so-called `Bit Quads`.
    usecodes = any(map(x->typeof(x) <: Union{Measurement, BasicTopology}, properties))
    t = usecodes ? append_bitcodes(t, labels, N) : t
    for i = 1:length(properties)
        t = measure_feature(properties[i], t, labels, N)
        Base.display(t)
    end
    t
end

function append_bitcodes(t::IndexedTable, labels::AbstractArray, N::Int)
    # Stores counts of Bit Quad patterns for each component.
    ùì†‚ÇÄ = zeros(Int, N)
    ùì†‚ÇÅ = zeros(Int, N)
    ùì†‚ÇÇ = zeros(Int, N)
    ùì†‚ÇÉ = zeros(Int, N)
    ùì†‚ÇÑ = zeros(Int, N)
    ùì†‚Çì = zeros(Int, N)
    rows, cols = axes(labels)
    labels_padded = padarray(labels, Fill(0, (2,2)))
    rows, cols = axes(labels_padded)
    for r = first(rows):last(rows)-1
        for c = first(cols):last(cols)-1
            for n = 1:N
                p‚ÇÅ = labels_padded[r, c] == n ? 1 : 0
                p‚ÇÇ = labels_padded[r + 1, c] == n ? 1 : 0
                p‚ÇÉ = labels_padded[r, c + 1] == n ? 1 : 0
                p‚ÇÑ = labels_padded[r + 1, c + 1] == n ? 1 : 0
                ùì†‚ÇÄ[n] = Q‚ÇÄ(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ) ? ùì†‚ÇÄ[n] + 1 : ùì†‚ÇÄ[n]
                ùì†‚ÇÅ[n] = Q‚ÇÅ(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ) ? ùì†‚ÇÅ[n] + 1 : ùì†‚ÇÅ[n]
                ùì†‚ÇÇ[n] = Q‚ÇÇ(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ) ? ùì†‚ÇÇ[n] + 1 : ùì†‚ÇÇ[n]
                ùì†‚ÇÉ[n] = Q‚ÇÉ(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ) ? ùì†‚ÇÉ[n] + 1 : ùì†‚ÇÉ[n]
                ùì†‚ÇÑ[n] = Q‚ÇÑ(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ) ? ùì†‚ÇÑ[n] + 1 : ùì†‚ÇÑ[n]
                ùì†‚Çì[n] = Q‚Çì(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ) ? ùì†‚Çì[n] + 1 : ùì†‚Çì[n]
            end
        end
    end
    pushcol(t, :Q‚ÇÄ => ùì†‚ÇÄ, :Q‚ÇÅ => ùì†‚ÇÅ, :Q‚ÇÇ => ùì†‚ÇÇ, :Q‚ÇÉ => ùì†‚ÇÉ, :Q‚ÇÑ => ùì†‚ÇÑ, :Q‚Çì => ùì†‚Çì)
end


function Q‚ÇÄ(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ)
    c‚ÇÅ = (p‚ÇÅ == 0 && p‚ÇÇ == 0 && p‚ÇÉ == 0 &&  p‚ÇÑ == 0) ? true : false
end

function Q‚ÇÅ(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ)
    c‚ÇÅ = (p‚ÇÅ == 1 && p‚ÇÇ == 0 && p‚ÇÉ == 0 &&  p‚ÇÑ == 0) ? true : false
    c‚ÇÇ = (p‚ÇÅ == 0 && p‚ÇÇ == 0 && p‚ÇÉ == 1 &&  p‚ÇÑ == 0) ? true : false
    c‚ÇÉ = (p‚ÇÅ == 0 && p‚ÇÇ == 0 && p‚ÇÉ == 0 &&  p‚ÇÑ == 1) ? true : false
    c‚ÇÑ = (p‚ÇÅ == 0 && p‚ÇÇ == 1 && p‚ÇÉ == 0 &&  p‚ÇÑ == 0) ? true : false
    c‚ÇÅ || c‚ÇÇ || c‚ÇÉ || c‚ÇÑ
end

function Q‚ÇÇ(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ)
    c‚ÇÅ = (p‚ÇÅ == 1 && p‚ÇÇ == 0 && p‚ÇÉ == 1 &&  p‚ÇÑ == 0) ? true : false
    c‚ÇÇ = (p‚ÇÅ == 0 && p‚ÇÇ == 0 && p‚ÇÉ == 1 &&  p‚ÇÑ == 1) ? true : false
    c‚ÇÉ = (p‚ÇÅ == 0 && p‚ÇÇ == 1 && p‚ÇÉ == 0 &&  p‚ÇÑ == 1) ? true : false
    c‚ÇÑ = (p‚ÇÅ == 1 && p‚ÇÇ == 1 && p‚ÇÉ == 0 &&  p‚ÇÑ == 0) ? true : false
    c‚ÇÅ || c‚ÇÇ || c‚ÇÉ || c‚ÇÑ
end

function Q‚ÇÉ(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ)
    c‚ÇÅ = (p‚ÇÅ == 1 && p‚ÇÇ == 0 && p‚ÇÉ == 1 &&  p‚ÇÑ == 1) ? true : false
    c‚ÇÇ = (p‚ÇÅ == 0 && p‚ÇÇ == 1 && p‚ÇÉ == 1 &&  p‚ÇÑ == 1) ? true : false
    c‚ÇÉ = (p‚ÇÅ == 1 && p‚ÇÇ == 1 && p‚ÇÉ == 0 &&  p‚ÇÑ == 1) ? true : false
    c‚ÇÑ = (p‚ÇÅ == 1 && p‚ÇÇ == 1 && p‚ÇÉ == 1 &&  p‚ÇÑ == 0) ? true : false
    c‚ÇÅ || c‚ÇÇ || c‚ÇÉ || c‚ÇÑ
end

function Q‚ÇÑ(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ)
    c‚ÇÅ = (p‚ÇÅ == 1 && p‚ÇÇ == 1 && p‚ÇÉ == 1 &&  p‚ÇÑ == 1) ? true : false
end

function Q‚Çì(p‚ÇÅ, p‚ÇÇ, p‚ÇÉ, p‚ÇÑ)
    c‚ÇÅ = (p‚ÇÅ == 1 && p‚ÇÇ == 0 && p‚ÇÉ == 0 &&  p‚ÇÑ == 1) ? true : false
    c‚ÇÇ = (p‚ÇÅ == 0 && p‚ÇÇ == 1 && p‚ÇÉ == 1 &&  p‚ÇÑ == 0) ? true : false
    c‚ÇÅ || c‚ÇÇ
end
